// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id            String    @id @default(uuid()) @db.Uuid
  name          String 
  description   String?  
  logo          String?  
  cover         String?  
  address       String?  
  TVA           Boolean? 
  TVANumber     String?     
  email         String?  
  phone         String?  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  users         User[]
  Invitation    Invitation[]
  Project       Project[]
  Questionnaire Questionnaire[]
}

enum Role {
  ADMIN
  USER
}

model User {
  id          String  @id @default(uuid()) @db.Uuid
  email       String  @unique
  password    String
  role        Role    @default(USER)
  clientId    String  @db.Uuid
  client      Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Invitation {
  id                String   @id @default(uuid()) @db.Uuid
  clientId          String   @db.Uuid
  isAccountCreated  Boolean  @default(false)
  createdAt         DateTime @default(now())
  client            Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}
model Project {
  id            String   @id @default(uuid()) @db.Uuid
  clientId      String  @db.Uuid
  client        Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Questionnaire {
  id            String    @id @default(uuid()) @db.Uuid
  title         String?
  clientId      String?   @db.Uuid
  client        Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  isTemplate    Boolean   @default(false)
  sections      Section[]
}
model Section{
  id                String  @id @default(uuid()) @db.Uuid
  title             String?
  questionnaireId   String @db.Uuid
  questionnaire     Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  questions         Question[]
}

model Question {
  id                String @id @default(uuid()) @db.Uuid
  question          String?
  answer            String?
  sectionId         String @db.Uuid
  section           Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}